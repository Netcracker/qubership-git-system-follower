{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intoduction","text":"<p>git-system-follower (gsf) is a package manager for Git providers.</p> <p> </p> <ul> <li> <p>Supported Git providers </p> <p> Gitlab</p> </li> <li> <p>Supported Gear registries</p> <p> Dockerhub  Artifactory  Nexus</p> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>gsf designed to streamline the management of repository branch content and configuration. By automating installations, updates, and removals, gsf reduces manual intervention, prevents errors, and ensures a consistent state across projects.</p> <p>If you\u2019re managing CI/CD pipelines, infrastructure configurations, or any repository-bound tools, gsf is here to make your work easier, faster, and more reliable using Git packages, aka Gears.</p>"},{"location":"#problems-it-solves","title":"Problems It Solves","text":"<p>Have you used versioned <code>.gitlab-ci.yml</code> that require a specific file structure in the repository?</p> <p>If so, you've probably encountered configuration issues: you forgot to specify a mandatory parameter, didn't create the right file, and eventually the Pipeline doesn't work. Or maybe everything was working, and suddenly the Pipeline starts crashing for no apparent reason - and you waste time figuring out that someone accidentally changed the startup parameters. And if you need to update an old <code>.gitlab-ci.yml</code> to the latest version, you often have to manually migrate through multiple versions.</p> <p>gsf solves all of these problems by automatically managing your config file version and structure, eliminating all of these errors and saving you a lot of work:</p> <ul> <li> <p> Reduced manual work</p> <p>Package developers handle installation and updates automatically, eliminating manual configuration work.</p> </li> <li> <p> Version management </p> <p>Supports automated migrations between versions to ensure smooth updates without errors.</p> </li> <li> <p> Preserving user changes</p> <p>Smart file comparison prevents overwriting custom modifications during updates.</p> </li> <li> <p> Security and control</p> <p>Tracks installed packages in <code>.state.yaml</code> with hash verification to prevent unauthorized changes.</p> </li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Works only with repository branch content The manager operates exclusively within branches, managing the repository\u2019s content without altering branches, commits, or other repository elements.</p> </li> <li> <p>GitLab-specific support The current implementation is tailored to work with GitLab repositories.</p> </li> <li> <p>Package installation Quickly add new tools or configurations to a repository.</p> </li> <li> <p>Package updates Ensure smooth migrations between versions.</p> </li> <li> <p>Package removal Completely remove configurations and tools without leaving traces.</p> </li> <li> <p>Variable management Add or update variables in CI/CD systems like GitLab.</p> </li> <li> <p>Template generation Create configuration files while considering existing settings and user changes.</p> </li> <li> <p>Developer interface Provides API and tools for package developers to define how their packages are installed, updated, and removed. This ensures that package developers can define migration steps and other actions with precision.</p> </li> </ul>"},{"location":"#key-beneficiaries","title":"Key Beneficiaries","text":"<p>DevOps engineers, SRE engineers and other professionals working with GitOps repositories, for example, configuring projects linked to ArgoCD, GitLab CI/CD, or similar tools.</p>"},{"location":"#install","title":"Install","text":"<p>See Installation Guide.</p>"},{"location":"#docs","title":"Docs","text":"<p>Get started with the Quick Start Guide or plunge into the complete documentation.</p>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li> <p>CODE-OF-CONDUCT.md This document outlines the expected behavior for everyone interacting with the project. It fosters a respectful and inclusive environment for developers, contributors, and users.</p> </li> <li> <p>CONTRIBUTING.md This document acts as a guide for anyone interested in contributing to the project. It clarifies the contribution process and helps maintainers manage contributions effectively.</p> </li> <li> <p>SECURITY.md This document focuses on security practices and reporting vulnerabilities. It aims to promote a secure development environment and responsible handling of security issues.</p> </li> </ul>"},{"location":"#changelog","title":"Changelog","text":"<p>Detailed changes for each release are documented in the TBD.</p>"},{"location":"#license","title":"License","text":"<p>Apache License 2.0</p>"},{"location":"home/","title":"Docs Home","text":""},{"location":"home/#how-the-documentation-is-organized","title":"How the documentation is organized","text":"<p>git-system-follower comes with extensive documentation. To help you find the right resources, here's a high-level overview of how it's structured:</p> <ul> <li>Getting Started Guides provide a step-by-step introduction to using git-system-follower for the first time.  These guides are ideal for new users who want to quickly get familiar with the basics and set up their first Gear.</li> <li>Concept Guides dive into essential topics and workflows, offering a deeper understanding of how git-system-follower works and the key principles behind it. These guides will give you the foundational knowledge needed to use the package manager effectively.</li> <li>How-to Guides are practical walkthroughs for solving specific problems or handling common tasks. They are aimed at users who already understand the basics and want to explore more advanced features and solutions for real-world scenarios.</li> </ul>"},{"location":"home/#quicklinks","title":"Quicklinks","text":"<ul> <li> Quickstart Guide How to install and get started with git-system-follower.</li> <li> Gear Guide Practical steps for building git-system-follower Gears.</li> </ul>"},{"location":"api_reference/","title":"Package api reference","text":"<p>git-system-follower provides an interface for developers for creating/deleting CI/CD variables and generate/update/delete a <code>cookiecutter</code> template in a repository branch</p>"},{"location":"api_reference/#general-information","title":"General information","text":"<p>git-system-follower always calls <code>main</code> function from package api with <code>parameters</code> argument which are of type <code>Parameters</code> from <code>git_system_follower.develop.api.types</code></p>"},{"location":"api_reference/develop_interface/","title":"Develop interface","text":"<p>Here you find information about what is contained in <code>git_system_follower.develop.api</code></p>"},{"location":"api_reference/develop_interface/#quicklinks","title":"Quicklinks","text":"<ul> <li>types Module Types that can be used inside an api package</li> <li>cicd_variables Module Functions for interaction with CI/CD variables</li> <li>templates Module Functions for interaction with <code>cookiecutter</code> templates</li> </ul>"},{"location":"api_reference/develop_interface/cicd_variables/","title":"cicd_variables module","text":"<p>API provided in <code>cicd_variables.py</code> module. This module contains functions for easy interaction with CI/CD variables.</p> <p>Warning</p> <p>When you want to mask a variable, follow Gitlab Mask a CI/CD variable rules</p>"},{"location":"api_reference/develop_interface/cicd_variables/#usage-in-package-api","title":"Usage in package api","text":"<pre><code>from git_system_follower.develop.api.cicd_variables import create_variable, delete_variable\n</code></pre>"},{"location":"api_reference/develop_interface/cicd_variables/#examples","title":"Examples","text":"<pre><code>from git_system_follower.develop.api.types import Parameters\nfrom git_system_follower.develop.api.cicd_variables import CICDVariable, create_variable, delete_variable\n\n\ndef main(parameters: Parameters):\n    delete_variable(parameters, parameters.cicd_variables['KUBE_TOKEN'])\n    create_variable(parameters, CICDVariable(name='KUBE_TOKEN', value='new_kubernetes_token', env='*', masked=True))\n</code></pre>"},{"location":"api_reference/develop_interface/cicd_variables/#functions-description","title":"Functions description","text":""},{"location":"api_reference/develop_interface/cicd_variables/#create_variable-function","title":"<code>create_variable</code> function","text":"<p><pre><code>def create_variable(\n    parameters: Parameters, variable: CICDVariable, *, \n    is_force: bool = False\n) -&gt; RESTObject | None\n</code></pre> Create CI/CD variable using gitlab REST API</p> <p>If <code>is_force</code> parameter is <code>False</code>, then it will necessarily be safe to create CI/CD variable:</p> <ol> <li>If CI/CD variable doesn't exist: create CI/CD variable</li> <li>If CI/CD variable exists:<ol> <li>CI/CD variables values doesn't match: notification of this (warning)</li> <li>CI/CD variables values matches: notification of this (info)</li> </ol> </li> </ol> <p>If <code>is_force</code> parameter is <code>True</code>, then it will necessarily be force to create CI/CD variable:</p> <ol> <li>If CI/CD variable doesn't exist: create CI/CD variable</li> <li>If CI/CD variable exists:<ol> <li>CI/CD variables values doesn't match: overwrite this CI/CD variable, notification of this (warning)</li> <li>CI/CD variables values content matches: notification of this (info)</li> </ol> </li> </ol>"},{"location":"api_reference/develop_interface/cicd_variables/#arguments","title":"Arguments","text":"Name Type Description <code>parameters</code> <code>Parameters</code> parameters that were passed to the package api <code>variable</code> <code>CICDVariable</code> CI/CD variable to be created"},{"location":"api_reference/develop_interface/cicd_variables/#keyword-arguments","title":"Keyword arguments","text":"Name Type Description <code>is_force</code> <code>bool</code> forced creation (ignore variable value)"},{"location":"api_reference/develop_interface/cicd_variables/#returns","title":"Returns","text":"<p>Creation response if variable is created (<code>RESTObject</code> class from <code>gitlab.base</code>. <code>gitlab</code> - <code>python-gitlab</code> python library)</p>"},{"location":"api_reference/develop_interface/cicd_variables/#delete_variable-function","title":"<code>delete_variable</code> function","text":"<p><pre><code>def delete_variable(\n    parameters: Parameters, variable: CICDVariable, *, \n    is_force: bool = False\n) -&gt; None\n</code></pre> Delete CI/CD variable using gitlab REST API</p> <p>If <code>is_force</code> parameter is <code>False</code>, then it will necessarily be safe to delete CI/CD variable:</p> <ol> <li>If CI/CD variable doesn't exist: do nothing</li> <li>If CI/CD variable exists:<ol> <li>CI/CD variables values doesn't match: notification of this (warning)</li> <li>CI/CD variables value matches: delete this CI/CD variable, notification of this (info)</li> </ol> </li> </ol> <p>If <code>is_force</code> parameter is <code>True</code>, then it will necessarily be force to delete CI/CD variable:</p> <ol> <li>If CI/CD variable doesn't exist: do nothing</li> <li>If CI/CD variable exists:<ol> <li>CI/CD variables values doesn't match: delete this file, notification of this (warning)</li> <li>CI/CD variables values matches: delete this file, notification of this (info)</li> </ol> </li> </ol>"},{"location":"api_reference/develop_interface/cicd_variables/#arguments_1","title":"Arguments","text":"Name Type Description <code>parameters</code> <code>Parameters</code> parameters that were passed to the package api <code>variable</code> <code>CICDVariable</code> CI/CD variable to be deleted"},{"location":"api_reference/develop_interface/cicd_variables/#keyword-arguments_1","title":"Keyword arguments","text":"Name Type Description <code>is_force</code> <code>bool</code> forced deletion (ignore variable value)"},{"location":"api_reference/develop_interface/cicd_variables/#returns_1","title":"Returns","text":"<p><code>None</code></p>"},{"location":"api_reference/develop_interface/cicd_variables/#advanced","title":"Advanced","text":"<p><code>is_force</code> is calculated inside functions as follows: if git-system-follower is run with <code>--force</code> option or if <code>is_force=True</code> is passed to function, then these functions will work in force mode</p>"},{"location":"api_reference/develop_interface/templates/","title":"templates module","text":"<p>API provided in <code>templates.py</code> module. This module contains functions for easy interaction with <code>cookiecutter</code> templates.</p>"},{"location":"api_reference/develop_interface/templates/#usage-in-package-api","title":"Usage in package api","text":"<pre><code>from git_system_follower.develop.api.templates import create_template, update_template, delete_template\n</code></pre>"},{"location":"api_reference/develop_interface/templates/#examples","title":"Examples","text":"<pre><code>from git_system_follower.develop.api.types import Parameters\nfrom git_system_follower.develop.api.templates import create_template, delete_template\n\n\ndef main(parameters: Parameters):\n   delete_template(parameters)\n   create_template(parameters, 'default')\n</code></pre>"},{"location":"api_reference/develop_interface/templates/#functions-description","title":"Functions description","text":""},{"location":"api_reference/develop_interface/templates/#get_template_names-function","title":"<code>get_template_names</code> function","text":"<p><pre><code>def get_template_names(parameters: Parameters) -&gt; tuple[str, ...]:\n</code></pre> Return tuple of template names </p>"},{"location":"api_reference/develop_interface/templates/#arguments","title":"Arguments","text":"Name Type Description <code>parameters</code> <code>Parameters</code> parameters that were passed to the package api"},{"location":"api_reference/develop_interface/templates/#create_template-function","title":"<code>create_template</code> function","text":"<p><pre><code>def create_template(\n    parameters: Parameters, template_name: str, *,\n    is_force: bool = False\n) -&gt; None:\n</code></pre> Create files using <code>cookiecutter</code> template</p> <p>If <code>is_force</code> parameter is <code>False</code>, then it will necessarily be safe to create files using template:</p> <ol> <li>If file doesn't exist: create file</li> <li>If file exists:<ol> <li>Files content doesn't match: notification of this (warning)</li> <li>Files content matches: notification of this (info)</li> </ol> </li> </ol> <p>If <code>is_force</code> parameter is <code>True</code>, then it will necessarily be force to create files using template:</p> <ol> <li>If file doesn't exist: create file</li> <li>If file exists:<ol> <li>Files content doesn't match: overwrite this file, notification of this (warning)</li> <li>Files content matches: notification of this (info)</li> </ol> </li> </ol>"},{"location":"api_reference/develop_interface/templates/#arguments_1","title":"Arguments","text":"Name Type Description <code>parameters</code> <code>Parameters</code> parameters that were passed to the package api <code>template_name</code> <code>str</code> name of template to be created"},{"location":"api_reference/develop_interface/templates/#keyword-arguments","title":"Keyword arguments","text":"Name Type Description <code>is_force</code> <code>bool</code> forced creation (ignore file content)"},{"location":"api_reference/develop_interface/templates/#update_template-function","title":"<code>update_template</code> function","text":"<p><pre><code>def update_template(\n    parameters: Parameters, *, \n    is_force: bool = False\n) -&gt; None:\n</code></pre> Update files using <code>cookiecutter</code> template</p> <p>If <code>is_force</code> parameter is <code>False</code>, then it will necessarily be safe to update files using template:</p> <ol> <li>If file doesn't exist: create file</li> <li>If file exists: do nothing<ol> <li>Files content doesn't match: notification of this (warning)</li> <li>Files content matches: notification of this (info)</li> </ol> </li> </ol> <p>If <code>is_force</code> parameter is <code>True</code>, then it will necessarily be force to update files using template:</p> <ol> <li>If file doesn't exist: create file</li> <li>If file exists:<ol> <li>Files content doesn't match: overwrite this file, notification of this (warning)</li> <li>Files content matches: notification of this (info)</li> </ol> </li> </ol>"},{"location":"api_reference/develop_interface/templates/#arguments_2","title":"Arguments","text":"Name Type Description <code>parameters</code> <code>Parameters</code> parameters that were passed to the package api"},{"location":"api_reference/develop_interface/templates/#keyword-arguments_1","title":"Keyword arguments","text":"Name Type Description <code>is_force</code> <code>bool</code> forced creation (ignore file content)"},{"location":"api_reference/develop_interface/templates/#delete_template-function","title":"<code>delete_template</code> function","text":"<p><pre><code>def delete_template(\n    parameters: Parameters, *, \n    is_force: bool = False\n) -&gt; None:\n</code></pre> Delete files using <code>cookiecutter</code> template</p> <p>If <code>is_force</code> parameter is <code>False</code>, then it will necessarily be safe to delete files using template:</p> <ol> <li>If file doesn't exist: do nothing</li> <li>If file exists:<ol> <li>Files content doesn't match: notification of this (warning)</li> <li>Files content matches: delete this file, notification of this (info)</li> </ol> </li> </ol> <p>If <code>is_force</code> parameter is <code>True</code>, then it will necessarily be force to delete files using template:</p> <ol> <li>If file doesn't exist: do nothing</li> <li>If file exists:<ol> <li>Files content doesn't match: delete this file, notification of this (warning)</li> <li>Files content matches: delete this file, notification of this (info)</li> </ol> </li> </ol>"},{"location":"api_reference/develop_interface/templates/#arguments_3","title":"Arguments","text":"Name Type Description <code>parameters</code> <code>Parameters</code> parameters that were passed to the package api"},{"location":"api_reference/develop_interface/templates/#keyword-arguments_2","title":"Keyword arguments","text":"Name Type Description <code>is_force</code> <code>bool</code> forced deletion (ignore file content)"},{"location":"api_reference/develop_interface/types/","title":"types module","text":"<p>API provided in <code>types.py</code> module. This module contains classes for easy interaction. You can also use them as type hints in your code.</p>"},{"location":"api_reference/develop_interface/types/#usage-in-package-api","title":"Usage in package api","text":"<pre><code>from git_system_follower.develop.api.types import (\n   Parameters, System, ExtraParam, ExtraParams, \n   CICDVariable, CICDVariables\n)\n</code></pre>"},{"location":"api_reference/develop_interface/types/#classes-description","title":"Classes description","text":""},{"location":"api_reference/develop_interface/types/#parameters-class","title":"<code>Parameters</code> class","text":"<p><pre><code>@dataclass(frozen=True)\nclass Parameters:\n    system: System\n    workdir: Path\n    extras: ExtraParams\n    cicd_variables: CICDVariables\n    all_cicd_variables: CICDVariables\n    used_template: str\n</code></pre> Parameters which git-system-follower passed to package api</p> <p>Warning</p> <p>This class is only used to transfer information. Don't create your own instances</p>"},{"location":"api_reference/develop_interface/types/#fields","title":"Fields","text":"Name Type Description <code>system</code> <code>System</code> system information <code>workdir</code> <code>Path</code> from <code>pathlib</code> library current work directory <code>extras</code> <code>ExtraParams</code> extra parameters which have been passed in git-system-follower <code>cicd_variables</code> <code>CICDVariables</code> CI/CD variables that wew created by previous gear version <code>all_cicd_variables</code> <code>CICDVariables</code> all CI/CD variables that exist in repository <code>used_template</code> <code>str</code> last used template. If <code>used_template=None</code> then no template has been used. If template has been deleted, it will be <code>None</code>"},{"location":"api_reference/develop_interface/types/#system-class","title":"<code>System</code> class","text":"<p><pre><code>@dataclass(frozen=True)\nclass System:\n    host_domain: str\n</code></pre> System information about instance in which gear installed/uninstalled</p> <p>Warning</p> <p>This class is only used to transfer information. Don't create your own instances</p>"},{"location":"api_reference/develop_interface/types/#fields_1","title":"Fields","text":"Name Type Description <code>host_domain</code> <code>str</code> host domain, e.g. <code>your.company.com</code>"},{"location":"api_reference/develop_interface/types/#extraparam-class","title":"<code>ExtraParam</code> class","text":"<p><pre><code>class ExtraParam(NamedTuple):\n    name: str\n    value: str\n    masked: bool\n</code></pre> Extra parameter information</p>"},{"location":"api_reference/develop_interface/types/#fields_2","title":"Fields","text":"Name Type Description <code>name</code> <code>str</code> extra parameter name <code>value</code> <code>str</code> extra parameter value <code>masked</code> <code>bool</code> whether to mask a extra parameter in logs"},{"location":"api_reference/develop_interface/types/#extraparams-class","title":"<code>ExtraParams</code> class","text":"<p><pre><code>ExtraParamName = str\nExtraParams = dict[ExtraParamName, ExtraParam]\n</code></pre> Extra parameters which have been passed in git-system-follower as <code>--extra &lt;name&gt; &lt;value&gt; &lt;masked/no-masked&gt;</code></p> <p>This is <code>dict</code> where key is parameter name, value is <code>ExtraParam</code></p>"},{"location":"api_reference/develop_interface/types/#cicdvariable-class","title":"<code>CICDVariable</code> class","text":"<p><pre><code>class CICDVariable(TypedDict):\n    name: str\n    value: str\n    env: str\n    masked: bool\n</code></pre> CI/CD variable information </p>"},{"location":"api_reference/develop_interface/types/#fields_3","title":"Fields","text":"Name Type Description <code>name</code> <code>str</code> CI/CD variable name <code>value</code> <code>str</code> CI/CD variable value <code>env</code> <code>str</code> Gitlab environment (see Gitlab Environments documentation) <code>masked</code> <code>bool</code> whether to mask a CI/CD variable in logs and in Gitlab"},{"location":"api_reference/develop_interface/types/#cicdvariables-class","title":"<code>CICDVariables</code> class","text":"<p><pre><code>CICDVariableName = str\nCICDVariables = dict[CICDVariableName, CICDVariable]\n</code></pre> CI/CD variables information</p> <p>This is <code>dict</code> where key is CI/CD variable name, value is <code>CICDVariable</code> </p>"},{"location":"cli_reference/","title":"CLI reference","text":"<p>This CLI provides several commands for managing gears within your GitLab repository. Below are pages with the available commands and their functionalities:</p> <ol> <li>download - Download gears</li> <li>install - Install gears to Gitlab repository</li> <li>list - List installed gears: in develop </li> <li>uninstall - Uninstall gears from Gitlab repository</li> <li>version - Show version</li> </ol>"},{"location":"cli_reference/#entry-points","title":"Entry points","text":"<p>You can use long and short entry point to use git-system-follower, their functionality is the same: <pre><code>git-system-follower --help  # long entry point\ngsf --help                  # short entry point\n</code></pre> From now on, the short entry point option will be used in the documentation: <code>gsf</code></p>"},{"location":"cli_reference/#display-help-text","title":"Display help text","text":"<p>To list the help on any command just execute the command, followed by the <code>--help</code> option</p> <pre><code>gsf --help\n</code></pre> <pre><code>Usage: gsf [OPTIONS] COMMAND [ARGS]...\n\n  The package manager for Git providers\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  download   Download packages\n  install    Install packages to branches in GitLab repository\n  list       List installed packages: in develop\n  uninstall  Uninstall packages from branches in GitLab repository\n  version    Show version\n</code></pre>"},{"location":"cli_reference/download/","title":"download","text":"<p>Downloading all listed gears (docker images) and then finding the package layer in that image and saving it as <code>.tar.gz</code> file</p>"},{"location":"cli_reference/download/#display-help-text","title":"Display help text","text":"<p>To list the help on any command just execute the command, followed by the <code>--help</code> option <pre><code>gsf download --help\n</code></pre></p>"},{"location":"cli_reference/download/#arguments","title":"Arguments","text":"Name Description Example <code>GEARS</code> Download all listed gears as image: <code>&lt;registry&gt;/&lt;repository&gt;/&lt;name&gt;:&lt;tag&gt;</code> <code>artifactory.company.com/path-to/your-image:1.0.0</code>"},{"location":"cli_reference/download/#options","title":"Options","text":"Name Description Mandatory Default value Environment variable Example <code>-d</code>, <code>--directory</code> Directory where gears will be downloaded - <code>.</code> (Current directory) - <code>/opt/gsf-packages</code> <code>--registry-type</code> Specify the registry type or use automatic detection - <code>Autodetect</code> - <code>Autodetect</code>, <code>Dockerhub</code>, <code>Artifactory</code>, <code>Nexus</code> <code>--registry-username</code> Username for basic authentication in the registry when downloading Gears - - <code>GSF_REGISTRY_USERNAME</code> <code>myusername</code>, <code>k1shk1n</code> <code>--registry-password</code> Password for basic authentication in the registry when downloading Gears - - <code>GSF_REGISTRY_PASSWORD</code> <code>MyPa$$w0rd</code> <code>--insecure-registry</code> Allow insecure connections to the registry (use HTTP instead of HTTPS) - <code>False</code> - <code>--debug</code> Show debug level messages - <code>False</code> -"},{"location":"cli_reference/download/#examples","title":"Examples","text":"<p>Downloading the package (for the first time)</p> <pre><code>gsf download artifactory.company.com/my-image:1.0.0 -d packages\n</code></pre> <pre><code>[04:26:54.404] INFO     |\n     .-,\n  .^.: :.^.    \u250f\u2513\u257b\u2533 \u250f\u2513\u257b\u257b\u250f\u2513\u2533\u250f\u2513\u250f\u2533\u2513 \u250f\u2513\u250f\u2513\u257b \u257b \u250f\u2513\u250f \u2513\u250f\u2513\u2533\u2513\n ,-' .-. '-,   \u2503\u2513\u2503\u2503 \u2517\u2513\u2517\u2503\u2517\u2513\u2503\u2523 \u2503\u2503\u2503 \u2523 \u2503\u2503\u2503 \u2503 \u2503\u2503\u2503\u2503\u2503\u2523 \u2523\u251b\n '-. '-' .-'   \u2517\u251b\u2579\u2579 \u2517\u251b\u2517\u251b\u2517\u251b\u2579\u2517\u251b\u2579 \u2579 \u2579 \u2517\u251b\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u253b\u251b\u2517\u251b\u251b\u2517\n  '.`; ;`.'    git-system-follower v0.0.1\n     `-`\n[04:26:54.404] INFO     |\n\u256d\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 Start parameters \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256e\n  gears             = artifactory.company.com/my-image:1.0.0\n  directory         = /home/tests/packages\n  registry_type     = Autodetect\n  registry-username =\n  registry-password =\n  insecure-registry =\n  debug             = False\n\u2570\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256f\n[04:26:54.405] INFO     | :: Downloading packages\n[04:26:54.405] INFO     | -&gt; Downloading artifactory.company.com/my-image:1.0.0\n[04:26:54.424] INFO     | artifactory.company.com is of type Artifactory\n[04:26:55.461] INFO     | my-gear@1.0.0 package is provided as docker image (Image: artifactory.company.com/my-image:1.0.0)\n[04:26:55.461] SUCCESS  | Downloaded package from artifactory.company.com/my-image:1.0.0 to packages/my-gear@1.0.0.tar.gz\n[04:26:55.465] SUCCESS  | Download complete\n</code></pre> <p>Downloading package (next times):</p> <pre><code>gsf download artifactory.company.com/my-image:1.0.0 -d packages\n</code></pre> <pre><code>[04:44:11.786] INFO     |\n    .-,\n .^.: :.^.   \u250f\u2513\u257b\u2533 \u250f\u2513\u257b\u257b\u250f\u2513\u2533\u250f\u2513\u250f\u2533\u2513 \u250f\u2513\u250f\u2513\u257b \u257b \u250f\u2513\u250f \u2513\u250f\u2513\u2533\u2513\n,-' .-. '-,  \u2503\u2513\u2503\u2503 \u2517\u2513\u2517\u2503\u2517\u2513\u2503\u2523 \u2503\u2503\u2503 \u2523 \u2503\u2503\u2503 \u2503 \u2503\u2503\u2503\u2503\u2503\u2523 \u2523\u251b\n'-. '-' .-'  \u2517\u251b\u2579\u2579 \u2517\u251b\u2517\u251b\u2517\u251b\u2579\u2517\u251b\u2579 \u2579 \u2579 \u2517\u251b\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u253b\u251b\u2517\u251b\u251b\u2517\n '.`; ;`.'   git-system-follower v0.0.1\n    `-`\n[04:44:11.786] INFO     |\n\u256d\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 Start parameters \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256e\n  gears     = artifactory.company.com/my-image:1.0.0\n  directory = /home/tests/packages\n  debug     = False\n\u2570\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256f\n[04:44:11.787] INFO     | :: Downloading packages\n[04:44:11.787] INFO     | -&gt; Downloading artifactory.company.com/my-image:1.0.0\n[04:44:11.789] INFO     | my-gear@1.0.0 package is provided as docker image (Image: artifactory.company.com/my-image:1.0.0)\n[04:44:11.789] INFO     | Package has already been downloaded to packages/my-gear@1.0.0.tar.gz from artifactory.company.com/my-image:1.0.0. Skip downloading\n[04:44:11.790] SUCCESS  | Download complete\n</code></pre> <p>The images don't download because the git-system-follower has remembered what it downloaded and  where it downloaded it to: it uses its <code>.git-system-follower/packages</code> directory and <code>.git-system-follower/image-package-map.json</code> file to map the image to the package directory it downloaded (see Image-to-package mapping)</p>"},{"location":"cli_reference/download/#advanced","title":"Advanced","text":""},{"location":"cli_reference/download/#authentication-methods-for-registry-access","title":"Authentication Methods for Registry Access","text":"<p>You can work with private registries by providing authentication credentials.</p> <p>There are three ways to specify credentials, listed in order of priority: </p> <ol> <li>Pass the credentials directly using <code>--registry-username</code> and <code>--registry-password</code></li> <li>Credentials can be provided via stdin: <code>echo \"&lt;username&gt;:&lt;password&gt;\" | gsf download ...</code></li> <li>Set <code>GSF_REGISTRY_USERNAME</code> and <code>GSF_REGISTRY_PASSWORD</code> as environment variables</li> <li>If only username or only password has been provided then git-system-follower will request the rest of credentials using prompt (in interactive mode)</li> </ol> <p>If multiple methods are used, command-line parameters take precedence over stdin, and stdin takes precedence over environment variables.</p> <p>Info</p> <p>How it works internally: if you pass a string that contains <code>:</code>,  then git-system-follower parse that string as username everything before that character,  everything after it as password.</p> <p>If this string doesn't contain <code>:</code> git-system-follower will try to unmask this string using <code>base64</code> and will parse unmasked string again.</p> <p>If <code>:</code> is not in the string again, git-system-follower recognizes the entire string as a passed password</p>"},{"location":"cli_reference/download/#specific-registry-authentication","title":"Specific registry authentication","text":"<p>Some registries, such as AWS ECR, introduce their own custom \"enhancements\" on top of the classic Docker authentication mechanisms like Basic and Bearer. In this case, git-system-follower follows the standard Docker Registry HTTP API v2 specification, and any additional authentication logic is left to the user or the orchestration system in place.</p> <p>For AWS ECR specifically, you can authenticate using the AWS CLI (after configuring your local AWS account) like so: <pre><code>aws ecr get-authorization-token --output text --query 'authorizationData[].authorizationToken' | gsf download ...\n</code></pre></p> <p>Note</p> <p>AWS ECR does not use Bearer authentication. Instead, it relies on Basic authentication,  where the username is literally <code>AWS</code>, and the password is a temporary token (which lasts for 12 hours) obtained  via <code>aws ecr get-authorization-token</code>.</p>"},{"location":"cli_reference/download/#why-docker-is-not-a-required","title":"Why docker is not a required","text":"<p>When the git-system-follower downloads the docker image it doesn't need <code>docker</code> because we use the <code>oras</code> library (it doesn't use the docker socket)</p>"},{"location":"cli_reference/download/#downloading-process","title":"Downloading process","text":"<p>git-system-follower downloads the image using the <code>oras</code> library, finds the layer that contains the gear source code. It saves this layer (<code>.tar.gz</code>) to the passed directory, extracts it to the <code>.git-system-follower/packages</code> directory to figure out what file name to assign to this <code>.tar.gz</code> archive like <code>&lt;name&gt;@&lt;version&gt;.tar.gz</code> and for next following use: installation, uninstallation</p>"},{"location":"cli_reference/download/#image-to-package-mapping","title":"Image-to-package mapping","text":"<p>In order not to download the same image repeatedly because of possible differences between the image name and version and the name and version of the gear itself (from <code>package.yaml</code>), an additional logic of saving image-to-package mapping in a separate file was made - <code>.git-system-follower/image-package-map.json</code></p> <p>git-system-follower compares the gears with and images that are specified in <code>.git-system-follower/image-package-map.json</code> file with the package names in the <code>.git-system-follower/packages</code> directory. If there is no such comparison, or if there is a comparison but no gear,  git-system-follower will download the gear</p>"},{"location":"cli_reference/install/","title":"install","text":"<p>Install gears to branches in GitLab repository</p> <p>git-system-follower install a gears into the repository branch using the package api: <code>init</code> / <code>update</code> / <code>delete</code>. After it git-system-follower create/update <code>.states.yaml</code> file in root of directory where save information about installed gears</p> <p>You can pass a gear to installation as:</p> <ol> <li>docker image: it will be downloaded (see CLI reference/download)</li> <li><code>.tar.gz</code> file</li> <li>directory with gear (source code)</li> </ol>"},{"location":"cli_reference/install/#display-help-text","title":"Display help text","text":"<p>To list the help on any command just execute the command, followed by the <code>--help</code> option <pre><code>gsf install --help\n</code></pre></p>"},{"location":"cli_reference/install/#arguments","title":"Arguments","text":"Name Description Example <code>GEARS</code> Install all listed gears as:1. image: <code>&lt;registry&gt;/&lt;repository&gt;/&lt;name&gt;:&lt;tag&gt;</code>2. .tar.gz archive: <code>/path/to/archive.tar.gz</code>3.source code files: <code>/path/to/gear directory</code> <code>artifactory.company.com/my-image:1.0.0</code>, <code>/path/to/my-archive@1.0.0.tar.gz</code>, <code>/path/to/my-gear@1.0.0</code>, <code>project/my-package</code>"},{"location":"cli_reference/install/#options","title":"Options","text":"Name Description Mandatory Default value Environment variable Example <code>-r</code>, <code>--repo</code> Gitlab repository url + - - <code>https://git.company.com/test</code>, <code>http://localhost/test.git</code> <code>-b</code>, <code>--branch</code> Branches in which to install the gears + - - <code>main</code>, <code>features/FAKE-0000</code> <code>-t</code>, <code>--token</code> Gitlab access token + - <code>GSF_GIT_TOKEN</code> <code>glpat-xxxxxXYvoxqPZw_5Kmyr</code> <code>--extra</code> Extra parameters to be passed to the package API: <code>name</code>, <code>value</code>, <code>masked</code>/<code>no-masked</code> of variable - - - <code>add_functionality true no-masked</code>, <code>password MyPa$$word masked</code> <code>--message</code> Commit message - <code>Installed gear(s)</code> - <code>FAKE-0000 update our tools</code> <code>--git-username</code> Username under which the commit will be made to the repository - The username in the <code>~/.gitconfig</code> file, if it does not exist, <code>unknown</code> <code>GSF_GIT_USERNAME</code> <code>Name LastName</code>, <code>MyName</code> <code>--git-email</code> User email under which the commit will be made to the repository - The user email in the <code>~/.gitconfig</code> file, if it does not exist, <code>unknown@example.com</code> <code>GSF_GIT_EMAIL</code> <code>your.email@gmail.com</code> <code>--registry-type</code> Specify the registry type or use automatic detection - <code>Autodetect</code> - <code>Autodetect</code>, <code>Dockerhub</code>, <code>Artifactory</code>, <code>Nexus</code> <code>--registry-username</code> Username for basic authentication in the registry when downloading Gears - - <code>GSF_REGISTRY_USERNAME</code> <code>myusername</code>, <code>k1shk1n</code> <code>--registry-password</code> Password for basic authentication in the registry when downloading Gears - - <code>GSF_REGISTRY_PASSWORD</code> <code>MyPa$$w0rd</code> <code>--insecure-registry</code> Allow insecure connections to the registry (use HTTP instead of HTTPS) - <code>False</code> - <code>--force</code> Forced installation: change of files, CI/CD variables as specified in gear - <code>False</code> - <code>--debug</code> Show debug level messages - <code>False</code> -"},{"location":"cli_reference/install/#examples","title":"Examples","text":"<p>Installing the gear (docker image) to main branch <pre><code>gsf install -r https://git.company.com/test.git \\\n            -b main -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n            artifactory.company.com/my-image:1.0.0\n</code></pre></p> <p>Installing the gear (<code>.tar.gz</code> archive) to main branch <pre><code>gsf install -r https://git.company.com/test.git \\\n            -b main -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n            packages/my-archive@1.0.0.tar.gz\n</code></pre></p> <p>Installing the gear (directory with source code) to main branch <pre><code>gsf install -r https://git.company.com/test.git \\\n            -b main -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n            packages/my-project\n</code></pre></p> <p>Specify multiple gears for installation: <pre><code>gsf install -r https://git.company.com/test.git \\\n            -b main -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n            artifactory.company.com/my-image:1.0.0 \\\n            packages/some-other-package.tar.gz \\\n            projects/my-project\n</code></pre></p> <p>Specify multiple branches for installing: <pre><code>gsf install -r https://git.company.com/test.git \\\n            -b main -b develop -b feature\\DTWO-0000 \\\n            -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n            packages/my-gear@1.0.0\n</code></pre></p> <p>Passing extra parameters to api package during installation: <pre><code>gsf install -r https://git.company.com/test.git \\\n            -b main -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n            --extra FIRST_VAR_NAME FIRST_VAR_VALUE no-masked \\\n            --extra PASSWORD Pa$$w0rd masked \\\n            packages/my-gear@1.0.0\n</code></pre></p>"},{"location":"cli_reference/install/#advanced","title":"Advanced","text":""},{"location":"cli_reference/install/#authentication-methods-for-registry-access","title":"Authentication Methods for Registry Access","text":"<p>You can work with private registries by providing authentication credentials.</p> <p>There are three ways to specify credentials, listed in order of priority: </p> <ol> <li>Pass the credentials directly using <code>--registry-username</code> and <code>--registry-password</code></li> <li>Credentials can be provided via stdin: <code>echo \"&lt;username&gt;:&lt;password&gt;\" | gsf download ...</code></li> <li>Set <code>GSF_REGISTRY_USERNAME</code> and <code>GSF_REGISTRY_PASSWORD</code> as environment variables</li> <li>If only username or only password has been provided then git-system-follower will request the rest of credentials using prompt (in interactive mode)</li> </ol> <p>If multiple methods are used, command-line parameters take precedence over stdin, and stdin takes precedence over environment variables.</p> <p>Info</p> <p>How it works internally: if you pass a string that contains <code>:</code>,  then git-system-follower parse that string as username everything before that character,  everything after it as password.</p> <p>If this string doesn't contain <code>:</code> git-system-follower will try to unmask this string using <code>base64</code> and will parse unmasked string again.</p> <p>If <code>:</code> is not in the string again, git-system-follower recognizes the entire string as a passed password</p>"},{"location":"cli_reference/install/#specific-registry-authentication","title":"Specific registry authentication","text":"<p>Some registries, such as AWS ECR, introduce their own custom \"enhancements\" on top of the classic Docker authentication mechanisms like Basic and Bearer. In this case, git-system-follower follows the standard Docker Registry HTTP API v2 specification, and any additional authentication logic is left to the user or the orchestration system in place.</p> <p>For AWS ECR specifically, you can authenticate using the AWS CLI (after configuring your local AWS account) like so: <pre><code>aws ecr get-authorization-token --output text --query 'authorizationData[].authorizationToken' | gsf install ...\n</code></pre></p> <p>Note</p> <p>AWS ECR does not use Bearer authentication. Instead, it relies on Basic authentication,  where the username is literally <code>AWS</code>, and the password is a temporary token (which lasts for 12 hours) obtained  via <code>aws ecr get-authorization-token</code>.</p>"},{"location":"cli_reference/install/#carefully-updatedelete-created-resources","title":"Carefully update/delete created resources","text":"<p>git-system-follower provides an interface for creating file structure and creating CI/CD variables, so that when installing, git-system-follower tries to carefully update/delete created resources.</p> <p>For example, if a CI/CD variable has already been created and does not match what the gear being installed provides, git-system-follower will skip processing that variable. But if the <code>--force</code> parameter is specified or  <code>is_force=True</code> is specified in creating variable in package api, git-system-follower will update/delete the variable regardless of its contents.</p> <p>Works the same way with files in the repository.</p>"},{"location":"cli_reference/install/#installation-order","title":"Installation order","text":"<p>Install dependencies first, then root gear.</p>"},{"location":"cli_reference/install/#authorization-and-commits-to-the-repository","title":"Authorization and commits to the repository","text":"<p>The token from <code>--token</code> does not have to belong to the user from <code>--git-username</code>/<code>--git-email</code>.  Commit changes can be made under a user who does not have permissions to the repository.  But the push of these changes must be done under a user who has access to the repository.</p>"},{"location":"cli_reference/list/","title":"list","text":"<p>in develop: TBD</p>"},{"location":"cli_reference/uninstall/","title":"uninstall","text":"<p>Uninstall gears from branches in GitLab repository</p> <p>git-system-follower uninstall a gears into the repository branch using the package api: <code>delete</code>. After it git-system-follower update <code>.states.yaml</code> file in root of directory where delete information about uninstalled gears</p> <p>You can pass a gear to uninstallation as:</p> <ol> <li>docker image: it will be downloaded (see CLI reference/download)</li> <li><code>.tar.gz</code> file</li> <li>directory with gear (source code)</li> </ol>"},{"location":"cli_reference/uninstall/#display-help-text","title":"Display help text","text":"<p>To list the help on any command just execute the command, followed by the <code>--help</code> option <pre><code>gsf uninstall --help\n</code></pre></p>"},{"location":"cli_reference/uninstall/#arguments","title":"Arguments","text":"Name Description Example <code>GEARS</code> Uninstall all listed gears as:1. image: <code>&lt;registry&gt;/&lt;repository&gt;/&lt;name&gt;:&lt;tag&gt;</code>2. .tar.gz archive: <code>/path/to/archive.tar.gz</code>3.source code files: <code>/path/to/gear directory</code> <code>artifactory.company.com/path-to/your-image:1.0.0</code>, <code>/path/to/my-archive@1.0.0.tar.gz</code>, <code>/path/to/my-gear@1.0.0</code>, <code>project/my-package</code>"},{"location":"cli_reference/uninstall/#options","title":"Options","text":"Name Description Mandatory Default value Environment variable Example <code>-r</code>, <code>--repo</code> Gitlab repository url + - - <code>https://git.company.com/test</code>, <code>http://localhost/test.git</code> <code>-b</code>, <code>--branch</code> Branches in which to uninstall the gears + - - <code>main</code>, <code>features/FAKE-0000</code> <code>-t</code>, <code>--token</code> Gitlab access token + - <code>GSF_GIT_TOKEN</code> <code>glpat-xxxxxXYvoxqPZw_5Kmyr</code> <code>--extra</code> Extra parameters to be passed to the package API: <code>name</code>, <code>value</code>, <code>masked</code>/<code>no-masked</code> of variable - - - <code>add_functionality true no-masked</code>, <code>password MyPa$$word masked</code> <code>--ticket</code> Ticket ID that will be automatically added to the beginning of each commit message - <code>FAKE-0000</code> - <code>FAKE-0001</code>, <code>ABCD-1234</code> <code>--message</code> Commit message text after the ticket ID' - <code>Uninstalled gear(s)</code> - <code>Another commit message</code> <code>--git-username</code> Username under which the commit will be made to the repository - The username in the <code>~/.gitconfig</code> file, if it does not exist, <code>unknown</code> <code>GSF_GIT_USERNAME</code> <code>Name LastName</code>, <code>MyName</code> <code>--git-email</code> User email under which the commit will be made to the repository - The user email in the <code>~/.gitconfig</code> file, if it does not exist, <code>unknown@example.com</code> <code>GSF_GIT_EMAIL</code> <code>your.email@gmail.com</code> <code>--registry-type</code> Specify the registry type or use automatic detection - <code>Autodetect</code> - <code>Autodetect</code>, <code>Dockerhub</code>, <code>Artifactory</code>, <code>Nexus</code> <code>--registry-username</code> Username for basic authentication in the registry when downloading Gears - - <code>GSF_REGISTRY_USERNAME</code> <code>myusername</code>, <code>k1shk1n</code> <code>--registry-password</code> Password for basic authentication in the registry when downloading Gears - - <code>GSF_REGISTRY_PASSWORD</code> <code>MyPa$$w0rd</code> <code>--insecure-registry</code> Allow insecure connections to the registry (use HTTP instead of HTTPS) - <code>False</code> - <code>--force</code> Forced uninstallation: change of files, CI/CD variables as specified in gear - <code>False</code> - <code>--debug</code> Show debug level messages - <code>False</code> -"},{"location":"cli_reference/uninstall/#examples","title":"Examples","text":"<p>Uninstalling the gear (docker image) to main branch <pre><code>gsf uninstall -r https://git.company.com/test.git \\\n              -b main -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n              artifactory.company.com/path-to/your-image:1.0.0\n</code></pre></p> <p>Uninstalling the gear (<code>.tar.gz</code> archive) to main branch <pre><code>gsf uninstall -r https://git.company.com/test.git \\\n              -b main -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n              packages/my-archive.tar.gz\n</code></pre></p> <p>Uninstalling the gear (directory with source code) to main branch <pre><code>gsf uninstall -r https://git.company.com/test.git \\\n              -b main -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n              packages/my-project\n</code></pre></p> <p>Specify multiple gears for uninstallation: <pre><code>gsf uninstall -r https://git.company.com/test.git \\\n              -b main -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n              artifactory.company.com/path-to/my-image:1.0.0 \\\n              packages/some-other-package.tar.gz \\\n              projects/my-project\n</code></pre></p> <p>Specify multiple branches for uninstallation: <pre><code>gsf uninstall -r https://git.company.com/test.git \\\n              -b main -b develop -b feature\\DTWO-0000 \\\n              -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n              packages/my-gear@1.0.0.3_r1.7.1\n</code></pre></p> <p>Passing extra parameters to api package during uninstallation: <pre><code>gsf uninstall -r https://git.company.com/test.git \\\n              -b main -t glpat-xxxxxXYvoxqPZw_5Kmyr \\\n              --extra FIRST_VAR_NAME FIRST_VAR_VALUE no-masked \\\n              --extra PASSWORD Pa$$w0rd masked \\\n              packages/my-gear@1.0.0\n</code></pre></p>"},{"location":"cli_reference/uninstall/#advanced","title":"Advanced","text":""},{"location":"cli_reference/uninstall/#authentication-methods-for-registry-access","title":"Authentication Methods for Registry Access","text":"<p>You can work with private registries by providing authentication credentials.</p> <p>There are three ways to specify credentials, listed in order of priority: </p> <ol> <li>Pass the credentials directly using <code>--registry-username</code> and <code>--registry-password</code></li> <li>Credentials can be provided via stdin: <code>echo \"&lt;username&gt;:&lt;password&gt;\" | gsf download ...</code></li> <li>Set <code>GSF_REGISTRY_USERNAME</code> and <code>GSF_REGISTRY_PASSWORD</code> as environment variables</li> <li>If only username or only password has been provided then git-system-follower will request the rest of credentials using prompt (in interactive mode)</li> </ol> <p>If multiple methods are used, command-line parameters take precedence over stdin, and stdin takes precedence over environment variables.</p> <p>Info</p> <p>How it works internally: if you pass a string that contains <code>:</code>,  then git-system-follower parse that string as username everything before that character,  everything after it as password.</p> <p>If this string doesn't contain <code>:</code> git-system-follower will try to unmask this string using <code>base64</code> and will parse unmasked string again.</p> <p>If <code>:</code> is not in the string again, git-system-follower recognizes the entire string as a passed password</p>"},{"location":"cli_reference/uninstall/#specific-registry-authentication","title":"Specific registry authentication","text":"<p>Some registries, such as AWS ECR, introduce their own custom \"enhancements\" on top of the classic Docker authentication mechanisms like Basic and Bearer. In this case, git-system-follower follows the standard Docker Registry HTTP API v2 specification, and any additional authentication logic is left to the user or the orchestration system in place.</p> <p>For AWS ECR specifically, you can authenticate using the AWS CLI (after configuring your local AWS account) like so: <pre><code>aws ecr get-authorization-token --output text --query 'authorizationData[].authorizationToken' | gsf uninstall ...\n</code></pre></p> <p>Note</p> <p>AWS ECR does not use Bearer authentication. Instead, it relies on Basic authentication,  where the username is literally <code>AWS</code>, and the password is a temporary token (which lasts for 12 hours) obtained  via <code>aws ecr get-authorization-token</code>.</p>"},{"location":"cli_reference/uninstall/#carefully-delete-created-resources","title":"Carefully delete created resources","text":"<p>git-system-follower provides an interface for creating file structure and creating CI/CD variables, so that when uninstalling, git-system-follower tries to carefully delete created resources.</p> <p>For example, if a CI/CD variable exist and does not match what the gear being uninstalled provides, git-system-follower will skip processing that variable. But if the <code>--force</code> parameter is specified or  <code>is_force=True</code> is specified in deletion variable in package api, git-system-follower will delete the variable regardless of its contents.  If CI/CD variable is used by another gear, this variable will raise error.</p> <p>Works the same way with files in the repository (except by using another gear).</p>"},{"location":"cli_reference/uninstall/#uninstallation-order","title":"Uninstallation order","text":"<p>Uninstall root gear first, then dependencies.</p>"},{"location":"cli_reference/uninstall/#authorization-and-commits-to-the-repository","title":"Authorization and commits to the repository","text":"<p>The token from <code>--token</code> does not have to belong to the user from <code>--git-username</code>/<code>--git-email</code>.  Commit changes can be made under a user who does not have permissions to the repository.  But the push of these changes must be done under a user who has access to the repository.</p>"},{"location":"cli_reference/version/","title":"version","text":"<p>Show git-system-follower version</p>"},{"location":"cli_reference/version/#display-help-text","title":"Display help text","text":"<p>To list the help on any command just execute the command, followed by the <code>--help</code> option</p> <pre><code>gsf version --help\n</code></pre>"},{"location":"cli_reference/version/#examples","title":"Examples","text":"<p>Show versions</p> <pre><code>gsf version\n</code></pre> <pre><code>0.5.0\n</code></pre> <p>Tip</p> <p>If you prefer a more \u201cpythonic\u201d approach to show versions. You can use <code>gsf --version</code> instead of <code>gsf version</code>, the result of these commands is the same.</p>"},{"location":"concepts/","title":"Concept Guides","text":"<p>Here you find intoductions to all key parts of git-system-follower that you wull need for your work</p>"},{"location":"concepts/#quicklinks","title":"Quicklinks","text":"<ul> <li> <p>Gear Guide Explains the Gears format and gives basic guidelines for Gears with git-system-follower</p> </li> <li> <p>.state.yaml Guide Explains the structure of the <code>.state.yaml</code> file and gives basic guidelines for working with it</p> </li> </ul>"},{"location":"concepts/gears/","title":"Gears","text":"<p>git-system-follower uses a packaging format called Gear. Gear is a collection of files describe the variables and structure of files in a repository.</p> <p>Gears are created as files laid out in a particular directory tree. They can be packaged into archives, docker images/OCI artifacts.</p>"},{"location":"concepts/gears/#the-gear-file-structure","title":"The Gear file structure","text":"<p>A Gear is organized as a collection of files in the <code>git-system-follower-package/</code> directory inside your project.</p> <p>Inside of this directory, git-system-follower will expect a structure that matches this: <pre><code>git-system-follower-package/\n  package.yaml  # A .yaml file containing information about Gear\n  scripts/      # A directory with package API\n</code></pre></p>"},{"location":"concepts/gears/#the-packageyaml-file","title":"The package.yaml file","text":"<p>The <code>package.yaml</code> is required for a Gear. It contains the following fields: <pre><code>apiVersion: The Gear API version (required)\ntype: The type of the Gear (required)\nname: The name of the Gear (required)\nversion: The version of the Gear (required)\ndependencies: # A list of the Gear requirements (optional)\n  - Docker image of another package\n  - Another docker image of another package\n</code></pre></p>"},{"location":"concepts/gears/#gears-and-versioning","title":"Gears and Versioning","text":"<p>Every Gears must have a version number. A version must follow TBD</p>"},{"location":"concepts/gears/#the-apiversion-field","title":"The <code>apiVersion</code> field","text":"<p><code>apiVersion</code> field allows git-system-follower to understand which version of this Gear</p> <p>You can check available <code>apiVersion</code> list</p>"},{"location":"concepts/gears/#the-type-field","title":"The <code>type</code> field","text":"<p><code>type</code> field allows git-system-follower to understand how work with this Gear</p>"},{"location":"concepts/gears/#the-name-field","title":"The <code>name</code> field","text":"<p><code>name</code> field allows git-system-follower to uniquely identify the Gear. Acceptable characters: letter, digits, <code>.</code>, <code>-</code>, <code>_</code></p>"},{"location":"concepts/gears/#gears-dependencies","title":"Gears dependencies","text":"<p>One gear may depend on any number of other gears. To add a dependency, it must be specified as a docker image in the <code>dependencies</code> section.</p>"},{"location":"concepts/gears/#the-package-api-scripts-directory","title":"The package API (<code>scripts/</code> directory)","text":""},{"location":"concepts/gears/#scripts-file-structure","title":"<code>scripts/</code> file structure","text":"<p>The file structure contains version directories with python scripts and cookiecutter templates <pre><code>scripts/\n\u251c\u2500 &lt;version&gt;/\n\u2502  \u251c\u2500 delete.py\n\u2502  \u251c\u2500 init.py\n\u2502  \u251c\u2500 update.py\n\u2502  \u2514\u2500 templates/\n\u2502     \u251c\u2500 &lt;template&gt;/\n\u2502     \u2502  \u251c\u2500 cookiecutter.json\n\u2502     \u2502  \u2514\u2500 {{ cookiecutter.gsf_repository_name }}/\n\u2502     \u2502     \u2514\u2500 &lt;template files&gt;\n\u2502     \u2514\u2500 &lt;other template&gt;\n\u2502        \u2514\u2500 ...\n\u2514\u2500 &lt;next version&gt;/\n   \u2514\u2500 ...\n</code></pre></p>"},{"location":"concepts/gears/#python-scripts","title":"python scripts","text":"<p>scripts are used for different scenarios:</p> <ol> <li>git-system-follower uses <code>init.py</code> for initialization in the repository.</li> <li>git-system-follower uses <code>delete.py</code> for deletion in the repository.</li> <li>git-system-follower uses <code>update.py</code> to update in the repository.</li> <li>git-system-follower uses (TBD: to rollback or force-forward) in the repository.</li> </ol> <p>All of these scripts may use develop interface for to work with Gear in the repository provided by git-system-follower. You can use it from <code>from git_system_follower.develop.api</code> like this:</p> <pre><code>from git_system_follower.develop.api.types import Parameters\nfrom git_system_follower.develop.api.cicd_variables import CICDVariable, create_variable\nfrom git_system_follower.develop.api.templates import create_template\n</code></pre> <p>For more details on how to develop your package api, see API reference</p> <p>If you don't want to work with CI/CD variables, but only to create template(s),  you may not create init.py, delete.py, default functions will be used for them.</p> <p>Default <code>init.py</code>: <pre><code>def main(parameters: Parameters):\n    templates = get_template_names(parameters)\n    if not templates:\n        raise ValueError('There are no templates in the package')\n\n    if len(templates) &gt; 1:\n        template = parameters.extras.get('TEMPLATE')\n        if template is None:\n            raise ValueError('There are more than 1 template in the package, '\n                             'specify which one you want to use with the TEMPLATE variable')\n    else:\n        template = templates[0]\n\n    variables = parameters.extras.copy()\n    variables.pop('TEMPLATE', None)\n    create_template(parameters, template, variables)\n</code></pre> this default checks for the presence of templates:</p> <ol> <li>if there are no templates, it will generate an error,</li> <li>if there is one template, it will apply it,</li> <li>if there is more than one template, a <code>TEMPLATE</code> variable is needed so that git-system-follower can figure out which template to apply.</li> </ol> <p>Also, all variables passed with <code>--extra</code> will be passed to the template.</p> <p>Default <code>delete.py</code>: <pre><code>def main(parameters: Parameters):\n    delete_template(parameters)\n</code></pre> In this default only template deletion is called.  git-system-follower does not require any additional information, since it stores information about the generated template in <code>.state.yaml</code>.</p> <p>For more details about <code>.state.yaml</code>, see .state.yaml Guide</p>"},{"location":"concepts/gears/#cookiecutter-templates","title":"<code>cookiecutter</code> templates","text":"<p><code>cookiecutter</code> is used to generate templates. For creating templates, see cookiecutter documentation</p> <p>The only additional thing required for git-system-follower is to name the template root directory <code>{{ cookiecutter.gsf_repository_name }}</code> and add <code>gsf_repository_name</code> section with an empty value (<code>\"\"</code>) in <code>cookiecutter.json</code> file: <pre><code>{\n  \"gsf_repository_name\": \"\"\n}\n</code></pre></p> <p>P.S. Even if you don't need templates, but just copy files, still use <code>cookiecutter</code> with regular files for this purpose</p> <p>You can use variables that have been passed as extra parameters to git-system-follower. For example, you can use parameter, which have been passed to git-system-follower as <code>--extra VAR_NAME VAR_VALUE no-masked</code>, in template as <code>{{ cookiecutter.VAR_NAME }}</code></p>"},{"location":"concepts/gears/#build-gear","title":"Build Gear","text":"<p>The gear is built into a docker image for future use and distibution.</p> <p>For more details on how to build you gear, see build gear</p>"},{"location":"concepts/gears/#final-repository-file-structure-with-gear","title":"Final repository file structure with gear","text":"<pre><code>&lt;your repository&gt;\n\u251c\u2500 git-system-follower-package/\n\u2502  \u251c\u2500 package.yaml\n\u2502  \u2514\u2500 scripts/\n\u2502     \u251c\u2500 &lt;version&gt;/\n\u2502     \u2502  \u251c\u2500 delete.py\n\u2502     \u2502  \u251c\u2500 init.py\n\u2502     \u2502  \u251c\u2500 update.py\n\u2502     \u2502  \u2514\u2500 templates/\n\u2502     \u2502     \u251c\u2500 &lt;template&gt;/\n\u2502     \u2502     \u2502  \u251c\u2500 cookiecutter.json\n\u2502     \u2502     \u2502  \u2514\u2500 {{ cookiecutter.gsf_repository_name }}/\n\u2502     \u2502     \u2502     \u2514\u2500 &lt;template files&gt;\n\u2502     \u2502     \u2514\u2500 &lt;other template&gt;\n\u2502     \u2502        \u2514\u2500 ...\n\u2502     \u2514\u2500 &lt;next version&gt;/\n\u2502        \u2514\u2500 ...\n\u251c\u2500 Dockerfile        # for build git-system-follower package\n\u2514\u2500 &lt;your other files&gt;\n</code></pre>"},{"location":"concepts/gears/#advanced","title":"Advanced","text":""},{"location":"concepts/gears/#why-package-being-built-as-a-docker-image","title":"Why package being built as a docker image","text":"<p>The build process is docker image oriented because docker images are easy to build and transport</p>"},{"location":"concepts/gears/#how-version-is-updated","title":"How version is updated","text":"<p>git-system-follower sequentially installs all version that stand between versions A and B, where A is version currently installed, B is version we want to upgrade to</p> <p>Example:</p> <ul> <li><code>1.0.0</code> version installed</li> <li>We want to install <code>1.4.0</code> version</li> <li>There are five version between them: <code>1.1.0</code>, <code>1.2.0</code>, <code>1.2.1</code>, <code>1.2.2</code>, <code>1.3.0</code></li> </ul> <p>In this case, the update will be as follows: </p> <ol> <li>use <code>update.py</code> of <code>1.1.0</code> version</li> <li>use <code>update.py</code> of <code>1.2.0</code> version</li> <li>use <code>update.py</code> of <code>1.2.1</code> version</li> <li>use <code>update.py</code> of <code>1.2.2</code> version</li> <li>use <code>update.py</code> of <code>1.3.0</code> version</li> <li>use <code>update.py</code> of <code>1.4.0</code> version</li> </ol> <p>Each new version keeps the scripts of older versions, so git-system-follower won't download all those version, only latest (<code>1.4.0</code>)</p>"},{"location":"concepts/gears/#package-size-will-grow-because-of-scripts-what-to-do-about-it","title":"Package size will grow because of scripts, what to do about it","text":"<p>After some time you will realize that some versions will no longer be used/supported, update your package in your repositories and you will be able to remove scripts of irrelevant version from new version</p>"},{"location":"concepts/gears/#template-generation-work-in-package-api","title":"Template generation work in package api","text":"<p>Template is generated in the temp directory (<code>/tmp/</code>) with <code>gsf-package-manager-...</code> name (where <code>...</code> is a bunch of different letters and numbers) and then files are copied to local repository directory. This is so that if we have identical files, we can compare their contents for careful template generation</p>"},{"location":"concepts/state/","title":".state.yaml","text":"<p>git-system-follower stores state in the <code>.state.yaml</code> file at the root of the repository.</p> <p>git-system-follower hashes values in the <code>.state.yaml</code> to prevent unauthorized changes or misuse and masks template variable values</p>"},{"location":"concepts/state/#the-stateyaml-structure","title":"The <code>.state.yaml</code> structure","text":"<pre><code>hash: Hash of 'packages' section\npackages: # List of installed packages\n- cicd_variables: # Section of created CI/CD variables\n    hash: Hash of 'names' section\n    names: # Name list of created CI/CD variables\n      - Name of CI/CD variable\n      - Name of another CI/CD variable\n      - etc\n  dependencies: # List of dependencies of this package\n    - 'dependency-name@dependency-version'\n    - 'another-dependency-name@another-dependency-version'\n  last_update: Date in 'YYYY-MM-DD HH:MM:SS.ffffff' format\n  name: Gear name\n  template_variables: # Section of used variables to create template\n    variable_name: Masked Base64-encoded value\n    another_variable_name: Masked Base64-encoded value\n  used_template: Installation template used\n  version: Gear version\n</code></pre>"},{"location":"concepts/state/#packages-section","title":"<code>.packages</code> section","text":"<p>This is a list of installed packages in the current branch, all packages have the following structure: <pre><code>- cicd_variables: Section of created CI/CD variables\n  dependencies: List of dependencies of this package\n  last_update: Date in 'YYYY-MM-DD HH:MM:SS.ffffff' format\n  name: Gear name\n  template_variables: Section of used variables to create template\n  used_template: Installation template used\n  version: Gear version\n</code></pre></p>"},{"location":"concepts/state/#packagescicd_variables-section","title":"<code>.packages.cicd_variables</code> section","text":"<p>This section contains the names of the variables that resolves at run time of the git-system-follower.  The list of names is hashed to avoid manual modification of the <code>.state.yaml</code> file or the variables themselves. <pre><code>hash: Hash of 'names' section\nnames:\n  - Name of CI/CD variable\n  - Name of another CI/CD variable\n  - etc\n</code></pre></p>"},{"location":"concepts/state/#packagesdependencies-section","title":"<code>.packages.dependencies</code> section","text":"<p>In <code>.state.yaml</code>, dependencies are listed in the <code>dependencies</code> section as <code>name@version</code>. The details of each dependency-package are described separately.  This makes the structure more readable and simplifies dependency management.</p> <p>For example, we have package <code>my-second-gear@1.0.0</code> with dependency <code>my-first-gear@2.0.0</code>. It will be specified as follows: <pre><code>hash: ...\npackages:\n- cicd_variables: ...\n  dependencies:\n    - 'my-first-gear@2.0.0'\n  last_update: ...\n  name: my-second-gear\n  template_variables: ...\n  used_template: ...\n  version: 1.0.0\n- cicd_variables: ...\n  dependencies: []\n  last_update: ...\n  name: my-first-gear\n  template_variables: ...\n  used_template: ...\n  version: 2.0.0\n</code></pre></p>"},{"location":"concepts/state/#packageslast_update-section","title":"<code>.packages.last_update</code> section","text":"<p>This section contains the date of the last change in the format <code>YYYY-MM-DD HH:MM:SS.ffffff</code>.  The field is for informational purposes only and does not affect functionality.</p>"},{"location":"concepts/state/#packagesname-and-packagesversion-sections","title":"<code>.packages.name</code> and <code>.packages.version</code> sections","text":"<p>These sections contain information from <code>package.yaml</code> in Gear</p>"},{"location":"concepts/state/#packagestemplate_variables-section","title":"<code>.packages.template_variables</code> section","text":"<p>This is where the variables that were passed by the package developer to the template generation are stored.  This is to avoid having to remember and pass these variables again when the package is deleted.</p> <p>Warning</p> <p>Variable values are masked in <code>base64</code> encoding only, not encrypted.</p> <p>how to see the values of variables: <pre><code>echo \"&lt;variable value&gt;\" | base64 -d \n</code></pre></p>"},{"location":"concepts/state/#packagesused_template-section","title":"<code>.packages.used_template</code> section","text":"<p>This section specifies which template was used when the package was installed</p>"},{"location":"concepts/api_version_list/","title":"Available <code>apiVersion</code>","text":"<p>This page provides information about available <code>apiVersion</code> and links to descriptions of those versions</p> <p>Latest: <code>apiVersion</code> v1</p>"},{"location":"concepts/api_version_list/#apiversion-list","title":"<code>apiVersion</code> list:","text":"<ol> <li><code>apiVersion</code> v1</li> </ol>"},{"location":"concepts/api_version_list/v1/","title":"<code>apiVersion</code> v1","text":""},{"location":"concepts/api_version_list/v1/#gear-file-structure","title":"Gear file structure","text":"<pre><code>git-system-follower-package/\n\u251c\u2500 package.yaml\n\u2514\u2500 scripts/\n   \u251c\u2500 &lt;version&gt;/\n   \u2502   \u251c\u2500 delete.py\n   \u2502   \u251c\u2500 init.py\n   \u2502   \u251c\u2500 update.py\n   \u2502   \u2514\u2500 templates/\n   \u2502      \u251c\u2500 &lt;template&gt;/\n   \u2502      \u2502  \u251c\u2500 cookiecutter.json\n   \u2502      \u2502  \u2514\u2500 {{ cookiecutter.gsf_repository_name }}/\n   \u2502      \u2502     \u2514\u2500 &lt;template files&gt;\n   \u2502      \u2514\u2500 &lt;other template&gt;\n   \u2502         \u2514\u2500 ...\n   \u2514\u2500 &lt;next version&gt;/\n      \u2514\u2500 ...\n</code></pre>"},{"location":"concepts/api_version_list/v1/#description-packageyaml-file-sections","title":"Description <code>package.yaml</code> file sections","text":"Section Description Available types Example <code>apiVersion</code> <code>package.yaml</code> api version for git-system-follower to understand how to work with this Gear <code>v1</code> <code>v1</code> <code>type</code> Gear type <code>gitlab-ci-pipeline</code> <code>gitlab-ci-pipeline</code> <code>name</code> Gear name <code>any</code> <code>my-first-gear</code> <code>version</code> Gear version <code>any</code> <code>1.0.0</code> <code>dependencies</code> List of dependencies specified as docker images <code>any</code> <code>artifactory.company.com/path-to/your-image:1.0.0</code>"},{"location":"concepts/api_version_list/v1/#example","title":"Example","text":"<p>With dependency <pre><code>apiVersion: v1\ntype: gitlab-ci-pipeline\nname: my-gear\nversion: 1.0.0\ndependencies:\n  - artifactory.company.com/path-to/my-another-image:1.0.0\n</code></pre></p> <p>Without dependencies <pre><code>apiVersion: v1\ntype: gitlab-ci-pipeline\nname: my-gear\nversion: 1.0.0\n</code></pre></p>"},{"location":"concepts/plugins/","title":"Plugins","text":"<p>The functionality of git-system-follower can be extended with plugins.</p> <p>The plugin system in git-system-follower is written using the <code>pluggy</code> library.</p>"},{"location":"concepts/plugins/#extension-points","title":"Extension Points","text":"<ul> <li>CLI Arguments Expansion point for input arguments (Gears). Use this if you need to handle custom input.</li> </ul>"},{"location":"concepts/plugins/#how-to-connect-plugin","title":"How to connect plugin","text":"<p>A plugin is just as much a python package. git-system-follower reads all entry points available from the current environment. If an entry point belongs to a certain group, it will automatically try to load that plugin.</p>"},{"location":"concepts/plugins/cli_arguments/","title":"CLI Arguments Extension Point","text":"<p>Extension point for input arguments (aka Gears). Use this point if you need to handle custom input, for example,  you want to pass a <code>.txt</code> file that lists the OCI artifact.</p> <p>That is, you can write functionality to handle arguments that, for example, have a complex structure. </p> <p>Note</p> <p>Result of the plugin must be one of the following: a directory with the source code (<code>PackageCLISource</code>), a tar.gz archive (<code>PackageCLITarGz</code>), a docker image/OCI artifact (<code>PackageCLIImage</code>)</p> <p>See the example below</p> <p>Plugin System entry points group: <code>gsf.plugins.cli.packages</code></p>"},{"location":"concepts/plugins/cli_arguments/#plugin-file-structure","title":"Plugin file structure","text":"<pre><code>&lt;plugin name&gt;/  # e.g. txt-plugin\n\u251c\u2500 pyproject.toml\n\u2514\u2500 &lt;plugin name&gt;/  # e.g. txt_plugin\n   \u251c\u2500 __init__.py\n   \u251c\u2500 main.py\n   \u2514\u2500 &lt;other files&gt;/\n</code></pre>"},{"location":"concepts/plugins/cli_arguments/#pyprojecttoml-file","title":"<code>pyproject.toml</code> file","text":"<pre><code>[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"&lt;plugin name&gt;\"  # e.g. txt-plugin\nversion = \"0.0.1\"\ndependencies = [\n    'pluggy',\n    &lt;libraries you need&gt;  # e.g. requests\n]\n\n[project.entry-points.\"gsf.plugins.cli.packages\"]  # Registration with the CLI system\npoint-name = 'path.to.module:ImplementedInterface'  # A main entry point\n</code></pre>"},{"location":"concepts/plugins/cli_arguments/#mainpy-file","title":"<code>main.py</code> file","text":"<p>You can write a large plugin that includes many modules and complex logic, but the minimum <code>main.py</code> should contain only the implementation of the <code>match</code> and <code>get_gears</code> hooks.  If you need some additional parameters from cli, you can get them added with the help of <code>plugin_options</code>.</p> <p>For example, txt plugin: <pre><code>from pathlib import Path\n\nfrom git_system_follower.typings.cli import PackageCLIImage\nfrom git_system_follower.plugins.cli.packages.specs import HookSpec\nfrom git_system_follower.plugins.cli.packages import hookimpl\nfrom git_system_follower.plugins.cli.packages.default import ImagePlugin\n\n\nclass TxtPlugin(HookSpec):\n    suffix = '.txt'\n\n    @hookimpl\n    def match(self, value: str) -&gt; bool:\n        path = Path(value)\n        return path.name.endswith(self.suffix)\n\n    @hookimpl\n    def get_gears(self, value: str, **kwargs) -&gt; list[PackageCLIImage]:\n        path = Path(value)\n        with open(path, 'r') as file:\n            images = file.read()\n\n        image_plugin = ImagePlugin()\n        gears = []\n        for image in images:\n            gear = image_plugin.parse_image(image)\n            gears.append(gear)\n        return gears\n</code></pre></p>"},{"location":"concepts/plugins/versioning/","title":"Versioning","text":"<p>TBD</p>"},{"location":"getting_started/","title":"Getting started Guides","text":"<p>Here you'll find guides to getting started using git-system-follower</p> <ul> <li>Quickstart Guide How to install and get started with git-system-follower.</li> <li>Installation Guide Set of installation options with commands.</li> </ul>"},{"location":"getting_started/installation/","title":"Installation","text":"<p>This guide shows how to install the git-system-follower CLI. git-system-follower can be installed either source, or from pre-built python package.</p> <p>git-system-follower is python package, you can install it with any python package manager.</p> <p>Note</p> <p>git-system-follower only supports Linux, it can run on Windows or macOS, but officially Windows and macOS are not supported</p>"},{"location":"getting_started/installation/#from-pypi","title":"From PyPI","text":"<p>If you prefer to use git-system-follower as a standalone CLI tool instead of integrating its functionality into your Python packages, <code>uv tool</code> is the recommended installation method.</p> <p>For more details, see the uv tool documentation.</p> Recommended: By uv <p>Before proceeding, make sure <code>uv</code> is installed. See the uv installation guide</p> <p>Then, install git-system-follower with: <pre><code>uv tool install qubership-git-system-follower\n</code></pre></p> <p>However, you may want to install git-system-follower as a python package so that you can, for example, use it inside your own python packages</p> <p>You can also do this with <code>uv</code>: <pre><code># create &amp; activate virtual env\nuv venv .venv &amp;&amp; source .venv/bin/activate\n\n# install git-system-follower\nuv pip install qubership-git-system-follower\n</code></pre></p> <p>However, if <code>uv</code> is not a suitable option, use <code>pip</code> instead.</p> Stadndart: By pip <pre><code># create &amp; activate virtual env\npython -m venv .venv &amp;&amp; source .venv/bin/activate \n\n# Install git-system-follower\npip install qubership-git-system-follower\n</code></pre>"},{"location":"getting_started/installation/#from-source","title":"From Source","text":"<p>Building git-system-follower from source is slightly more work</p> <pre><code># create &amp; activate virtual env\npython -m venv .venv &amp;&amp; source .venv/bin/activate\n\n# Clone git repository\ngit clone https://github.com/Netcracker/qubership-git-system-follower.git\n\n# Install git-system-follower\npip install -e git-system-follower/\n</code></pre>"},{"location":"getting_started/quickstart/","title":"Quickstart Guide","text":"<p>This guide covers how you can get started using git-system-follower</p>"},{"location":"getting_started/quickstart/#requirements","title":"Requirements","text":"<p>The following tools are required for git-system-follower to work</p> <ol> <li><code>git</code> &gt;= 2.44.0 (see git-scm.com getting started installing git)</li> <li><code>python</code> &gt;= 3.10 (see wiki.python.org beginners guide)</li> </ol>"},{"location":"getting_started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>The following prerequisites are required for a successful use of git-system-follower:</p> <ol> <li>Gitlab instance with version &gt;= v16.2.10</li> </ol>"},{"location":"getting_started/quickstart/#install-git-system-follower","title":"Install git-system-follower","text":"<p>git-system-follower is a python package, you can install it with any python package manager</p> <p>For more details, see the Installation Guide</p>"},{"location":"getting_started/quickstart/#complete-repository-prerequisites","title":"Complete repository prerequisites","text":"<p>Once git-system-follower is ready, you can prepare the repository.</p> <p>Note</p> <p>Right now git-system-follower only works with Gitlab</p>"},{"location":"getting_started/quickstart/#gitlab-repository","title":"Gitlab repository","text":"<ol> <li>Create or select Gitlab repository: create new empty repositories within the group or utilize existing repositories that you wish to manage</li> <li>Generate <code>Access Token</code>:  <ol> <li>Create a GitLab <code>Access Token</code> with the following scopes:<ul> <li><code>api</code>: Full access to the API</li> <li><code>read_api</code>: Access to read API features</li> <li><code>read_repository</code>: Access to read repository data</li> <li><code>write_repository</code>: Access to modify repository data</li> </ul> </li> <li>Ensure the token is associated with a user who has the necessary permissions or use the repository <code>Access Token</code></li> </ol> </li> </ol> <p>Exporting the variable with the token to the repository before installing/uninstalling Gears: <pre><code>export GSF_GIT_TOKEN=&lt;your token&gt;\n</code></pre></p>"},{"location":"getting_started/quickstart/#install-an-example-gear","title":"Install an example Gear","text":"<p>To install a gear, you can run the <code>install</code> command <pre><code>gsf install --repo &lt;your repo&gt; \\\n            --branch &lt;your branch&gt; \\\n            &lt;TBD: example package&gt;\n</code></pre></p>"},{"location":"getting_started/quickstart/#uninstall-an-example-gear","title":"Uninstall an example Gear","text":"<p>To uninstall a gear, you can run the <code>uninstall</code> command <pre><code>gsf uninstall --repo &lt;your repo&gt; \\\n              --branch &lt;your branch&gt; \\\n              &lt;TBD: example package&gt;\n</code></pre></p>"},{"location":"how_to/","title":"How-to Guides","text":"<p>Here you will find short answers to \"How do I ...?\" types questions.</p>"},{"location":"how_to/#quicklinks","title":"Quicklinks","text":"<ul> <li>How to build your Gear</li> </ul>"},{"location":"how_to/build/","title":"Build Gear","text":"<p>Information on how to build your project as git-system-follower Gear</p>"},{"location":"how_to/build/#oci-artifact","title":"OCI artifact","text":"<p>Recommended option when you build your Gear as an OCI artifact</p> <p>Package file structure: <pre><code>&lt;your repository&gt;\n\u251c\u2500 git-system-follower-package/\n\u2502  \u2514\u2500 &lt;package files&gt;\n\u2514\u2500 &lt;your other files&gt;\n</code></pre></p> <p>Command to publish your Gear: <pre><code>oras push &lt;your registry&gt; git-system-follower-package/\n</code></pre></p>"},{"location":"how_to/build/#docker-image-with-artifact","title":"Docker image with artifact","text":"<p>Package file structure: <pre><code>&lt;your repository&gt;\n\u251c\u2500 git-system-follower-package/\n\u2502  \u2514\u2500 &lt;package files&gt;\n\u251c\u2500 Dockerfile\n\u2514\u2500 &lt;your other files&gt;\n</code></pre></p>"},{"location":"how_to/build/#dockerfile-file","title":"<code>Dockerfile</code> file","text":"<p>This simply requires you to put the gear in the image <pre><code>FROM scratch\n\nLABEL gsf.package=\"true\"\n\nCOPY git-system-follower-package /git-system-follower-package\n</code></pre></p> <p>Command to build &amp; publish your Gear: <pre><code>docker build -t &lt;image&gt;:&lt;tag&gt; .\ndocker push &lt;registry&gt;/&lt;image&gt;:&lt;tag&gt;\n</code></pre></p>"},{"location":"how_to/gear_development_cases/","title":"Gear development cases","text":""},{"location":"how_to/gear_development_cases/#ases-to-consider-when-developing-a-gear","title":"\u0421ases to consider when developing a Gear","text":"<p>in development</p>"},{"location":"how_to/integration_with_semantic_release/","title":"Integration with semantic release","text":""},{"location":"how_to/integration_with_semantic_release/#integration-with-semantic-release-tips-and-tricks","title":"Integration with semantic-release Tips and Tricks","text":"<p>in development</p>"}]}